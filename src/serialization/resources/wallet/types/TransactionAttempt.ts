/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Syndicate from "../../../../api";
import * as core from "../../../../core";

export const TransactionAttempt: core.serialization.ObjectSchema<
    serializers.wallet.TransactionAttempt.Raw,
    Syndicate.wallet.TransactionAttempt
> = core.serialization.object({
    transactionId: core.serialization.string(),
    hash: core.serialization.string(),
    chainId: core.serialization.number(),
    status: core.serialization.lazy(async () => (await import("../../..")).wallet.TransactionStatus),
    block: core.serialization.number(),
    signedTxn: core.serialization.string(),
    walletAddress: core.serialization.string(),
    reverted: core.serialization.boolean(),
    nonce: core.serialization.number(),
    createdAt: core.serialization.date(),
    updatedAt: core.serialization.date(),
});

export declare namespace TransactionAttempt {
    interface Raw {
        transactionId: string;
        hash: string;
        chainId: number;
        status: serializers.wallet.TransactionStatus.Raw;
        block: number;
        signedTxn: string;
        walletAddress: string;
        reverted: boolean;
        nonce: number;
        createdAt: string;
        updatedAt: string;
    }
}
